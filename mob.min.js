var NeusoftMob = (function() {
    window.MOB2 = window.MOB2 || {};
    MOB2.utils = {
        isWX: function() {
            var b = window.navigator.userAgent.toLowerCase();
            if (b.match(/MicroMessenger/i) == "micromessenger") {
                return true
            }
            return false
        },
        isApp: function() {
            var b = window.navigator.userAgent.toLowerCase();
            if (b.match(/Neusoft/i) == "neusoft") {
                return true
            }
            return false
        },
        getOS: function() {
            var b = window.navigator.userAgent.toLowerCase();
            if (b.match(/Neusoft/i) != "neusoft") {
                console.log("运行环境：未在客户端内执行！")
            }
            if (b.match(/iPhone/i) == "iphone" || b.match(/iPad/i) == "ipad") {
                return 1
            } else {
                if (b.match(/Android/i) == "android") {
                    return 2
                } else {
                    if (b.match(/Windows/i == "windows") || b.match(/Linux/i == "linux") || b.match(/Macintosh/i == "macintosh")) {
                        return 3
                    }
                }
            }
        },
        isDeviceMotion: function() {
            if (window.DeviceMotionEvent) {
                return true
            }
            console.log("运行环境：本设备不支持devicemotion事件");
            return false
        },
        getUrlParam: function(c) {
            var b = window.location.search.substr(1);
            var d = new RegExp("(^|&)" + c + "=([^&]*)(&|$)");
            var e = b.match(d);
            if (e != null) {
                return decodeURI(e[2])
            }
            return null
        },
        initJB: function(b) {
            b.registerHandler("shareWXMoments", function(d, c) {
                c(d)
            });
            b.registerHandler("share", function(d, c) {
                c(d)
            });
            b.registerHandler("shake", function(d, c) {
                c(d)
            });
            b.registerHandler("closeWindow'", function(d, c) {
                c(d)
            });
            b.registerHandler("backWindow", function(d, c) {
                c(d)
            });
            b.registerHandler("login", function(d, c) {
                c(d)
            });
            b.registerHandler("getUserInfo", function(d, c) {
                c(d)
            });
            b.registerHandler("taskMessage", function(d, c) {
                c(d)
            });
            b.registerHandler("getLocation", function(d, c) {
                c(d)
            });
            b.registerHandler("getAMapLocation", function(d, c) {
                c(d)
            });
            b.registerHandler("setProductParam", function(d, c) {
                c(d)
            })
        }
    };
    var e = null;
    var b = function(h) {
        /*if (window.WebViewJavascriptBridge) {
            return h.call(WebViewJavascriptBridge)
        }*/

        if (window.WebViewJavascriptBridge) {
            return h(WebViewJavascriptBridge);
        } else {
			document.addEventListener('WebViewJavascriptBridgeReady', function (event) {
                if(window.onWebViewJavascriptBridgeReady) window.onWebViewJavascriptBridgeReady(window.__bridge = WebViewJavascriptBridge);
                h(WebViewJavascriptBridge)
            }, false);
        }
        if (window.WVJBCallbacks) {
            return window.WVJBCallbacks.push(h)
        }
        window.WVJBCallbacks = [h];
        var g = document.createElement("iframe");
        g.style.display = "none";
        g.src = "wvjbscheme://__BRIDGE_LOADED__";
        document.documentElement.appendChild(g);
        setTimeout(function() {
            document.documentElement.removeChild(g)
        }, 0)
    };
    var d = function(h, g, i) {
        if (g) {
            if (typeof(g) == "function") {
                e.callHandler(h, {}, function(j) {
                    g.call(this, j)
                })
            } else {
                if (i) {
                    e.callHandler(h, g, function(j) {
                        i.call(this, j)
                    })
                } else {
                    e.callHandler(h, g, function(j) {})
                }
            }
        } else {
            e.callHandler(h, {}, function(j) {})
        }
    };
    var a = function() {

        switch (MOB2.utils.getOS()) {
            case 1:
                if (window.JKMicroJSBridge) {
                    return MOB2.utils.initJB(window.JKMicroJSBridge)
                }
                break;
            case 2:
                b(function(g) {
                    e = g;
                    e.registerHandler("gpsUpdate", function(i, h) {
                        h(i)
                    })
                })
                break;
            default:
                console.log("Mob库暂时不支持该类型终端");
                break
        }
    };
    a.prototype = {
        bridge: null,
        shareWXMoments: function(b) {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("shareWXMoments", b, function(c) {});
                    break;
                case 2:
                    window.WebViewJavascriptBridge.shareWXMoments(JSON.stringify(b));
                    break;
                default:
                    console.log("分享朋友圈：不支持的终端类型！");
                    break
            }
        },
        share: function(b) {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("share", b, function(c) {});
                    break;
                case 2:
                    d("share",b)
                    break;
                default:
                    console.log("分享：不支持的终端类型！");
                    break
            }
        },
        shake: function() {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("shake", "", function(b) {});
                    break;
                case 2:
                    window.WebViewJavascriptBridge.shake();
                    break;
                default:
                    console.log("");
                    break
            }
        },
        closeWindow: function() {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("closeWindow", "", function(b) {});
                    break;
                case 2:
                    window.WebViewJavascriptBridge.closeWindow();
                    break;
                default:
                    console.log("");
                    break
            }
        },
        backWindow: function() {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("backWindow", "", function(b) {});
                    break;
                case 2:
                    window.WebViewJavascriptBridge.backWindow();
                    break;
                default:
                    console.log("");
                    break
            }
        },
        login: function() {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("login", "", function(b) {});
                    break;
                case 2:
                    window.WebViewJavascriptBridge.login();
                    break;
                default:
                    console.log("");
                    break
            }
        },
        getUserInfo: function() {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("getUserInfo", "", function(b) {});
                    break;
                case 2:
                    window.WebViewJavascriptBridge.getUserInfo();
                    break;
                default:
                    console.log("");
                    break
            }
        },
        taskMessage: function(b) {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("taskMessage", b);
                    break;
                case 2:
                    window.WebViewJavascriptBridge.taskMessage(b);
                    break;
                default:
                    console.log("");
                    break
            }
        },
        getLocation: function(b) {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("getLocation", b);
                    break;
                case 2:
                    window.WebViewJavascriptBridge.getLocation(b);
                    break;
                default:
                    console.log("");
                    break
            }
        },
        getAMapLocation: function(b) {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("getAMapLocation", b);
                    break;
                case 2:
                    window.WebViewJavascriptBridge.getAMapLocation(b);
                    break;
                default:
                    console.log("");
                    break
            }
        },
        setProductParam: function(b, c) {
            switch (MOB2.utils.getOS()) {
                case 1:
                    window.JKMicroJSBridge.callHandler("setProductParam", b, c);
                    break;
                case 2:
                    d("setProductParam",b,c)
                    //window.WebViewJavascriptBridge.setProductParam(JSON.stringify(b), c);
                    break;
                default:
                    console.log("");
                    break
            }
        }
    };
    return a
})();
